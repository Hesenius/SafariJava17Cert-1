Which are legal:

A) class X {
     var x = 99;
   }
B) void doStuff(var x) { }
C) void doStuff() {
     var x;
     x = 100;
   }
D) void doStuff() {
     var x = 100;
   }
E) void doStuff() {
     var x = { 1, 2, 3 };
   }

Q) Which are legal

A) for (var x = 0; x < 3; x++)
   System.out.println(x);

B)
 try (var in = new FileReader("");
      var out = new FileWriter("")) {
 }

C) var var = "var";

Q) Given:
var x = true ? "99" : 99;

What is the type of x?
A) none, it's fails to compile
B) int
C) String
D) Object
E) none of the above

Q) Given:
String s1 = new String("Hello");
s1.concat(" world");
System.out.println(s1);

What is the output?
A) Hello World
B) Hello
C) World
D) Doesn't compile
E) Exception at runtime


Q) Given:

String message = """Hello\
Java 17 World!""";
System.out.println(message + "XXX");

What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello
   Java 17 World!XXX
D) Hello Java 17 World!XXX
E) Hello Java 17 World!
   XXX

Q) Given:

       String message = """
           Hello
               Java 17 World!""";
       System.out.println(message + "XXX");

   What is the result?
   A) Hello
      Java 17 World!XXX
   B) Hello
          Java 17 World!XXX
   C) Hello
      Java 17 World!
      XXX
   D)     Hello
              Java 17 World!
      XXX

Q) Given:
int i = 3, j = 12, k = 2;
System.out.println(i + j / k - i);

hat is the result?
A) -15
B) 4
C) 6
D) -9

Q)  Given:
       doStuff(3)[5] = 99;

which declaration of doStuff would permit the code to compile?

A)  public static void doStuff(int x, int [] values) {}
B)  public static int doStuff(int x, int [] values) {return values[x];}
C)  public static int[] doStuff(int x) {return new int[]{};}
D)  public static int[] doStuff(int x, int[] values) {return values;}
E)  public static List<Integer> doStuff(int x) {return new ArrayList<>();}

Q) Given:
    int x = 10;
    System.out.println("value is " + (x++ = 99));

What is the result?
A) 10
B) 11
C) 99
D) 109
E) 110
F) Compilation fails

Q) Given:
    int j = 0;
    for (int i = 0; i < 3; i++) {
      if (i > ++j && i % 2 == 0) ++i = ++j;
      if (j > i + 2) continue;
      ++j;
      System.out.println(i + ", " + j);
    }

What is the result?
A) 0, 2
   1, 4
B) 0, 2
C) 1, 4
D) The program runs forever
E) Compilation fails

Q) Given:
int x = -1;
sout(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q)
  public static boolean getValue() {
    System.out.println("Getting value");
    return true;
  }

and:
    boolean b1 = false;
    System.out.println(b1 & getValue());

What is the result:
A) Compilation fails
B) false
C) true
D) Getting value
   false
E) Getting value
   true

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);
B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));
C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));
D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));
E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q)
Given:
String s1 = "Hello";
String s2 = new StringBuilder("Hello").toString();
String s3 = s2.intern();

and, in another jarfile:
   class X {
     static String h = "Hello";
   }

Which are true?
A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q) Given:
public class ResolveIdentifier {
  int x = 99;

  static void showIt() {
    int x = 98;
    System.out.println("x is " + x);
  }
}

What is the effect of calling showIt?
A) x is 98
B) x is 99
C) Compiler error
D) RuntimeException
E) x is <random value>

Q) Given:
public class Scr {
  static int x = -1;
  public static void main(String[] args) { new ScrSub().doStuff(); }
}
and:
class ScrSub extends Scr {
  int x = 99;
  void doStuff() {
    System.out.print(x + ","); // line n1
    int x = 100;
    System.out.print(x + ",");
    System.out.print(Scr.x);
  }
}
What is the result?
A) Compilation fails at line n1
B) Exception at line n1
C) 99, 100, -1
D) 0, 100, 99
E) 0, 100, -1

Q) Given:
class Base {
  void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
  void doBaseStuff() { System.out.println("doSubStuff"); }
  void doOtherStuff() { System.out.println("doOtherStuff"); }
}
and:
Base b = new Base();
b.doOtherStuff();

What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
class Base {
  void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
  void doBaseStuff() { System.out.println("doSubStuff"); }
  void doOtherStuff() { System.out.println("doOtherStuff"); }
}
and:
Base b = new Base();
((Sub)b).doOtherStuff();

What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
class Base {
  void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
  void doBaseStuff() { System.out.println("doSubStuff"); }
  void length() { System.out.println("doLengthStuff"); }
}
and:
  Base b = new Sub();
  ((StringBuilder) b) // line n1
      .length();      // line n2

What is the result?
A) doLengthStuff
B) Exception at line n1
C) Exception at line n2
D) Compilation failure at line n1
E) Compilation failure at line n2

Q) Given:
class Base {
  void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
  void doBaseStuff() { System.out.println("doSubStuff"); }
  void doOtherStuff() { System.out.println("doOtherStuff"); }
}

  Base b = new Sub();
  ((Runnable) b).run();
What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
    Object obj = "Hello";
    if (obj instanceof String) {
      String str = (String)obj;
      if (str.length() > 3) { System.out.println(str); }
      else { System.out.println("Too short"); }
    }
    Which replace the if clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Too short");
B)    if (obj instanceof String str when str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");
C)    if (obj instanceof String str if str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Too short");
E)    if (obj instanceof String str && str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");

Q) Which is/are valid?
   A) int x = 99; while (x) {}
   B) int x = 99; switch (x) {}
   C) enum Day { MONDAY; }
      ...
      Day x = Day.MONDAY;
      switch (x) {
        case MONDAY:
      }
   D) enum Day { MONDAY; }
      ...
      Day x = Day.MONDAY;
      switch (x) {
        case Day.MONDAY:
      }
   E) long count = 99;
      switch (count) {}

Q) Given:
       String s = "Hello";
       switch (s) {
         case "Hello" ->
             System.out.print("Bonjour "); // line n1
             System.out.print("Guten Tag ");
         default -> System.out.print("Bye");
       }

   Which is true?
   A) The code prints: Bonjour Guten Tag Bye
   B) The code prints: Bonjour Guten Tag
   C) If line n1 is removed the code prints: Guten Tag Bye
   D) If line n1 is removed the code prints: Guten Tag
   E) The code fails to compile

Q) Given:
  int x = 1;
  // line n1
  switch(x) {
    case 1: LocalDate.of(2023, x, 1);
    default: LocalDate.of(2022, 12, 1);
  };

 Which are true?
 A) The code compiles
 B) The code throws an exception at runtime
 C) The code compiles if line n1 is replaced with
    var d =
 D) The code compiles if the word "yield" is inserted
    after the colon in both the case and default
 E) The code compiles if the changes of both C and D
    are applied

Q) Given:
class MyException extends Exception {}
static void mightBreak() throws IOException, FileNotFoundException, SQLException {}

and:
  void caller() throws Throwable {
    try {
      mightBreak();
    }
    catch (IOException e) {}
    // line n1

What can be added at line n1?
A) catch (IOException e) {}
B) catch (FileNotFoundException e) {}
C) catch (SQLException e) {}
D) catch (Exception e) {}
E) catch (MyException e) {}

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given:
     var in = new FileReader(""); // line n1
       try (
           // line n2
           FileWriter out = new FileWriter("");
       ) { }
       // line n3

   Which is/are true
   A) in; can be added at line n2
   B) final can be added at line n1
   C) line n2 can be prefixed with final
   D) line n2 must be prefixed with final
   E) in = null; can be added at line n3

Q)  Given, in a single file X.java:
interface ArbInter {}
final class Y implements X {}
sealed interface X /* point x */{}
// line n1

Which is/are true?
A) the code compiles as it stands
B) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line 1
class Z implements X {}
C) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line 1
record Z(String name) implements X {}
D) the code compiles if the following is added at point x
   permits Y extends ArbInter
E) the code compiles if the following is added at line n1
non-sealed abstract class Z implements X permits Q {}
final class Q extends Z {}

Q)  Given:
---file: mypkg.S1---
package mypkg;
sealed class S1 /* point x */ {}
--------------------
---file: mypkg.S2---
package mypkg;
final class F1 extends S1 {}
--------------------
Which is/are true?
A) The code compiles as is
B) The code compiles after adding the following at point x
     permits F1
C) If a file otherpkg.F2 contains:
     package otherpkg;
     final class F2 extends S1 {}
   and:
     permits F1, F2 is added to point x
   then the code definitely compiles
D) If the additions of C) above are made and the code is
   entirely in a single module, then the code definitely compiles
E) none of the above

Q) Given:
enum Day {
  MONDAY(1), TUESDAY;
  public Day(int d) {}
  public Day() {}
}
and:
sout(Day.MONDAY)

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given:
enum Suit { HEARTS, DIAMONDS, CLUBS, SPADES;
  boolean isTrumps() { return this == HEARTS; }
}

Which is/are true?
A) isTrumps is implicitly static
B) isTrumps can be marked final
C) if it's necessary to prevent isTrumps being overridden,
   it should be marked final
D) isTrumps fails to compile
E) none of the above

Q) Given:
enum X {
  A, B;
  // line n1
}

Which can be added at line n1?
A) @Override public String toString() { return name().toUpperCase(); }
B) public String toString() { return name().toUpperCase(); }
C) public String name() { return super.name().toUpperCase(); }
D) public static String name(X x) { return x.name().toUpperCase(); }
E) none of the above

Q) Given:
record SalesItem(String description, int price) {
  // line n1
}

Which can be added individually at line n1?
A) private int stockOnHand;
B) @Override public int price() { return price; }
C) @Override public int price() { return super.price() + 10; }
D) static String ourStore;
E) public int getDiscount() { return price / 10; }
